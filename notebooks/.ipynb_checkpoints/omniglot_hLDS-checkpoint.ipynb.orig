{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9a0fcc29-2d64-49bf-9e76-ea1f4bd09a85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# x0 doesn't change over training so it shouldn't be passed to train or eval functions\n",
    "\n",
    "from hyperparams import get_hyperparameter_configuration\n",
    "from load_data import create_data_splits\n",
    "from initialise import initialise_model\n",
    "from train import optimise_VAE\n",
    "\n",
    "cfg = get_hyperparameter_configuration()\n",
    "\n",
    "train_dataset, validate_dataset, test_dataset, _ = create_data_splits(cfg)\n",
    "\n",
    "model, init_params, x0, key, cfg = initialise_model(cfg, train_dataset)\n",
    "\n",
    "from jax.config import config\n",
    "config.update(\"jax_debug_nans\", False)\n",
    "config.update(\"jax_disable_jit\", False)\n",
    "# use xeus-python kernel -- Python 3.9 (XPython) -- for debugging\n",
    "# typing help at a breakpoint() gives you list of available commands\n",
    "\n",
    "from flax.metrics import tensorboard\n",
    "log_folder = \"runs/exp9/profile\"\n",
    "writer = tensorboard.SummaryWriter(log_folder)\n",
    "%load_ext tensorboard\n",
    "%tensorboard --logdir=runs/exp9\n",
    "\n",
    "ckpt_dir = 'tmp/flax-checkpointing'\n",
    "import shutil, os\n",
    "if os.path.exists(ckpt_dir):\n",
    "    shutil.rmtree(ckpt_dir) # remove any existing checkpoints from the last notebook run\n",
    "\n",
    "state, losses = optimise_model(init_params, x0, model, train_dataset, validate_dataset, cfg, key, ckpt_dir, writer)\n",
    "\n",
    "# # restore checkpoint\n",
    "# ckpt = {'train_state': state, 'losses': losses, 'cfg': cfg}\n",
    "# restored_state = checkpoints.restore_checkpoint(ckpt_dir = ckpt_dir, target = ckpt)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
